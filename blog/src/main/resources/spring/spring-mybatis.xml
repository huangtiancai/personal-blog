<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">					
	<!-- 数据源(数据库连接池)  
    	   配置SqlSessionFactory-创建会话工厂  
    	   配置mapper文件扫描器 
    -->
    
    
    <!-- 2.整合mybatis部分 -->
    
    <!-- 加载配置文件 -->
    <!-- 将jdbc的配置参数引入 -->                
    <context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- 加载jdbc链接数据库的参数文件 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
    	<!-- 配置数据源的各个参数 -->
    	
    	 <!-- 基本属性 url、user、password -->
    	<property name="driverClassName" value="${jdbc.driverClassName}"/>
    	<property name="url" value="${jdbc.url}"/>
    	<property name="username" value="${jdbc.username}"/>
    	<property name="password" value="${jdbc.password}"/>
    	
    	<!-- 配置初始化大小、最小、最大 -->
    	<property name="initialSize" value="${jdbc.initialSize}"/>
    	<property name="minIdle" value="${jdbc.minIdle}"/>
    	<property name="maxActive" value="${jdbc.maxActive}"/>
    	
    	<!-- 配置获取连接等待超时的时间 -->
    	<property name="maxWait" value="${jdbc.maxWait}"/>
    	
    	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    	
    </bean>


	<!-- 配置SqlSessionFactory-创建会话工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 为会话注入数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 加载mybatis的全局配置文件 -->                            
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
		<!--mapper.xml所在位置-->
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
        <!--指定需要使用别名的PO类所在的包-->
        <property name="typeAliasesPackage" value="com.htc.entity" />
	</bean>

	<!-- 配置Mapper扫描 -->
	<!-- 
		  MapperScannerConfigurer :mapper扫描器
		    将指定包下的mapper接口 自动创建代理对象
		    创建的对象都在spring容器中 ，Bean的id就是mapper的类名(首字母只能小写)
    -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <!-- 指定要扫描的包 -->
	    <property name="basePackage" value="com.htc.mapper"></property>
	    <!-- 指定会话工厂 -->
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 对mybatis操作数据事务控制，spring使用jdbc的事务控制类 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源dataSource在spring-mybatis.xml中配置了 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    
    <!-- 通知 -->
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.htc.service.impl.*.*(..))"/>
	</aop:config>
	
    
</beans>